d<-as.integer(diff(perSec$time))
with(perSec,boxplot(d ~ bluetoothActive[-1] + batteryCharging[-1] + batteryAC[-1], ylim=c(1,10) ) )
#plots battery vs total per hour
ggplot(data=perSec,aes(time,id))+geom_point(aes(color=batteryCharging))+scale_x_datetime("",date_labels = "%H:%M", breaks=date_breaks(width="90 min"))
##last 4 hours
oneHourAgo<-now()-hours(4)
ggplot(data=perSec[perSec$time > oneHourAgo, ],aes(time,id))+geom_point(aes(color=batteryCharging,shape=bluetoothActive)) + scale_x_datetime("",date_labels = "%M", breaks=date_breaks(width="4 min"))
id<-"7748DA843C89C7BC"
time<-now()-days(7)
# Places a full data query for 48 hours of packets
query<-sprintf("select * from %s where id='%s' and month='%s' and day >= '%s' order by time","default.packets",id,month(time),mday(time),hour(time))
rs<-dbSendQuery(con,query)
chunk <- fetch(rs,n=-1,block=999)
# Cleans data
## Cleans beacons
splitBeacon <- function(b){
rssi<-strtoi(paste0("0x",substr(b[2],1,2)))
nbat<-strtoi(paste0("0x",substr(b[2],3,6)))
creic<-strtoi(paste0("0x",substr(b[2],6,9)))
flags<-strtoi(paste0("0x",substr(b[2],10,11)))
flagsBits<-intToBits(flags)
btnState<-as.logical(flagsBits[1])
btnChanged<-as.logical(flagsBits[2])
connectable<-as.logical(flagsBits[3])
brownOut<-as.logical(flagsBits[4])
list(id=id,rssi=rssi,nbat=nbat,creic=creic,flags=flags,btnState=btnState,btnChanged=btnChanged,
connectable=connectable,brownOut=brownOut)
}
tidyBeacon<-function(beacon){
b<-strsplit(beacon,"-")
lapply(b,splitBeacon)
}
tidyFlags <- function(sensor){
flags<-strtoi(paste0("0x",substr(sensor,1,2)))
flagsBits<-intToBits(flags)
bluetoothActive<-as.logical(flagsBits[1])
batteryCharging<-as.logical(flagsBits[2])
batteryAC<-as.logical(flagsBits[3])
usingWifi<-as.logical(flagsBits[4])
geolocationActive<-as.logical(flagsBits[5])
gpsAccurate<-as.logical(flagsBits[6])
gpsActive<-as.logical(flagsBits[7])
providerGps<-as.logical(flagsBits[8])
c(bluetoothActive,
batteryCharging,
batteryAC,
usingWifi,
geolocationActive,
gpsAccurate,
gpsActive,
providerGps)
}
tidyTable <- function(table){
table$sequencenumber<-strtoi(paste0("0x",table$sequencenumber))
#Clears flags
f<-sapply(table$sensor,tidyFlags)
table$bluetoothActive<-f[1,]
table$batteryCharging<-f[2,]
table$batteryAC<-f[3,]
table$usingWifi<-f[4,]
table$geolocationActive<-f[5,]
table$gpsAccurate<-f[6,]
table$gpsActive<-f[7,]
table$providerGps<-f[8,]
#Clears batteryLevel
table$batterylevel<-strtoi(paste0("0x",substr(table$sensor,3,4)))
table$sequenceNumber<-strtoi(paste0("0x",substr(table$sensor,5,8)))
table$gpsTimestamp<-strtoi(paste0("0x",substr(table$sensor,9,12)))
#Show if it is a timed beacon
table$timedBeacon<-sapply(table$beacon,function(x) grepl("FFFFFFFFFFFF",x))
table
}
tidyTimeForTable <- function(r){
r$timeint<-as.integer64(as.numeric(paste0("0x",r$time)))
r$timeintoriginal<-r$timeint
r$timeint<-r$timeint/1000
r$timeint<-as.integer(r$timeint)
r$time<-as.POSIXct(r$timeint, origin="1970-01-01")
r$ehour<-hour(r$time)
r$eday<-mday(r$time)
r$emin<-minute(r$time)
r$esec<-second(r$time)
r
}
##Cleans table
table<-tidyTable(chunk)
table<-tidyTimeForTable(table)
table$beacon<-tidyBeacon(table$beacon)
#Determines packet distribution per hour
aggregate(id ~ day + hour, table, length)
#Determines packet duplication
table$normatizedESec<-sapply(table$esec,function(x) if(x%%2==0) x else x-1)
aggregate(id ~ eday + ehour + emin + normatizedESec, table, length)
#Plots packet duplication per day
perSec<-aggregate(id ~ time + usingWifi + bluetoothActive + batteryCharging + batteryAC, table, length)
#ggplot(data=perSec,aes(time,id))+geom_bar(stat="identity")
#Plots time difference per control groups
d<-as.integer(diff(perSec$time))
with(perSec,boxplot(d ~ bluetoothActive[-1] + batteryCharging[-1] + batteryAC[-1], ylim=c(1,10) ) )
#plots battery vs total per hour
ggplot(data=perSec,aes(time,id))+geom_point(aes(color=batteryCharging))+scale_x_datetime("",date_labels = "%H:%M", breaks=date_breaks(width="90 min"))
##last 4 hours
oneHourAgo<-now()-hours(4)
ggplot(data=perSec[perSec$time > oneHourAgo, ],aes(time,id))+geom_point(aes(color=batteryCharging,shape=bluetoothActive)) + scale_x_datetime("",date_labels = "%M", breaks=date_breaks(width="4 min"))
table$timedBeacon
sum(table$timedBeacon)
#Plots packet duplication per day
perSec<-aggregate(id ~ time + usingWifi + bluetoothActive + timedBeacon + batteryCharging + batteryAC, table, length)
#ggplot(data=perSec,aes(time,id))+geom_bar(stat="identity")
#Plots time difference per control groups
d<-as.integer(diff(perSec$time))
with(perSec,boxplot(d ~ bluetoothActive[-1] + batteryCharging[-1] + batteryAC[-1], ylim=c(1,10) ) )
#plots battery vs total per hour
ggplot(data=perSec,aes(time,id))+geom_point(aes(color=batteryCharging))+scale_x_datetime("",date_labels = "%H:%M", breaks=date_breaks(width="90 min"))
##last 4 hours
oneHourAgo<-now()-hours(4)
ggplot(data=perSec[perSec$time > oneHourAgo, ],aes(time,id))+geom_point(aes(color=batteryCharging,shape=bluetoothActive)) + scale_x_datetime("",date_labels = "%M", breaks=date_breaks(width="4 min"))
ggplot(data=perSec[perSec$time > oneHourAgo, ],aes(time,id))+geom_point(aes(color=batteryCharging,shape=timedBeacon)) + scale_x_datetime("",date_labels = "%M", breaks=date_breaks(width="4 min"))
ggplot(data=perSec,aes(time,id))+geom_point(aes(color=batteryCharging))+scale_x_datetime("",date_labels = "%H:%M", breaks=date_breaks(width="90 min"))
ggplot(data=perSec,aes(time,id))+geom_point(aes(color=batteryCharging,shape=timedBeacon))+scale_x_datetime("",date_labels = "%H:%M", breaks=date_breaks(width="90 min"))
ggplot(data=perSec[perSec$time > oneHourAgo, ],aes(time,id))+geom_point(aes(color=batteryCharging,shape=timedBeacon)) + scale_x_datetime("",date_labels = "%M", breaks=date_breaks(width="4 min"))
id<-"3B9F3B3F14F41A36"
time<-now()-days(7)
# Places a full data query for 48 hours of packets
query<-sprintf("select * from %s where id='%s' and month='%s' and day >= '%s' order by time","default.packets",id,month(time),mday(time),hour(time))
rs<-dbSendQuery(con,query)
chunk <- fetch(rs,n=-1,block=999)
# Cleans data
## Cleans beacons
splitBeacon <- function(b){
rssi<-strtoi(paste0("0x",substr(b[2],1,2)))
nbat<-strtoi(paste0("0x",substr(b[2],3,6)))
creic<-strtoi(paste0("0x",substr(b[2],6,9)))
flags<-strtoi(paste0("0x",substr(b[2],10,11)))
flagsBits<-intToBits(flags)
btnState<-as.logical(flagsBits[1])
btnChanged<-as.logical(flagsBits[2])
connectable<-as.logical(flagsBits[3])
brownOut<-as.logical(flagsBits[4])
list(id=id,rssi=rssi,nbat=nbat,creic=creic,flags=flags,btnState=btnState,btnChanged=btnChanged,
connectable=connectable,brownOut=brownOut)
}
tidyBeacon<-function(beacon){
b<-strsplit(beacon,"-")
lapply(b,splitBeacon)
}
tidyFlags <- function(sensor){
flags<-strtoi(paste0("0x",substr(sensor,1,2)))
flagsBits<-intToBits(flags)
bluetoothActive<-as.logical(flagsBits[1])
batteryCharging<-as.logical(flagsBits[2])
batteryAC<-as.logical(flagsBits[3])
usingWifi<-as.logical(flagsBits[4])
geolocationActive<-as.logical(flagsBits[5])
gpsAccurate<-as.logical(flagsBits[6])
gpsActive<-as.logical(flagsBits[7])
providerGps<-as.logical(flagsBits[8])
c(bluetoothActive,
batteryCharging,
batteryAC,
usingWifi,
geolocationActive,
gpsAccurate,
gpsActive,
providerGps)
}
tidyTable <- function(table){
table$sequencenumber<-strtoi(paste0("0x",table$sequencenumber))
#Clears flags
f<-sapply(table$sensor,tidyFlags)
table$bluetoothActive<-f[1,]
table$batteryCharging<-f[2,]
table$batteryAC<-f[3,]
table$usingWifi<-f[4,]
table$geolocationActive<-f[5,]
table$gpsAccurate<-f[6,]
table$gpsActive<-f[7,]
table$providerGps<-f[8,]
#Clears batteryLevel
table$batterylevel<-strtoi(paste0("0x",substr(table$sensor,3,4)))
table$sequenceNumber<-strtoi(paste0("0x",substr(table$sensor,5,8)))
table$gpsTimestamp<-strtoi(paste0("0x",substr(table$sensor,9,12)))
#Show if it is a timed beacon
table$timedBeacon<-sapply(table$beacon,function(x) grepl("FFFFFFFFFFFF",x))
table
}
tidyTimeForTable <- function(r){
r$timeint<-as.integer64(as.numeric(paste0("0x",r$time)))
r$timeintoriginal<-r$timeint
r$timeint<-r$timeint/1000
r$timeint<-as.integer(r$timeint)
r$time<-as.POSIXct(r$timeint, origin="1970-01-01")
r$ehour<-hour(r$time)
r$eday<-mday(r$time)
r$emin<-minute(r$time)
r$esec<-second(r$time)
r
}
##Cleans table
table<-tidyTable(chunk)
table<-tidyTimeForTable(table)
table$beacon<-tidyBeacon(table$beacon)
#Determines packet distribution per hour
aggregate(id ~ day + hour, table, length)
#Determines packet duplication
table$normatizedESec<-sapply(table$esec,function(x) if(x%%2==0) x else x-1)
aggregate(id ~ eday + ehour + emin + normatizedESec, table, length)
#Plots packet duplication per day
perSec<-aggregate(id ~ time + usingWifi + bluetoothActive + timedBeacon + batteryCharging + batteryAC, table, length)
#ggplot(data=perSec,aes(time,id))+geom_bar(stat="identity")
#Plots time difference per control groups
d<-as.integer(diff(perSec$time))
with(perSec,boxplot(d ~ bluetoothActive[-1] + batteryCharging[-1] + batteryAC[-1], ylim=c(1,10) ) )
#plots battery vs total per hour
ggplot(data=perSec,aes(time,id))+geom_point(aes(color=batteryCharging,shape=timedBeacon))+scale_x_datetime("",date_labels = "%H:%M", breaks=date_breaks(width="90 min"))
##last 4 hours
oneHourAgo<-now()-hours(4)
ggplot(data=perSec[perSec$time > oneHourAgo, ],aes(time,id))+geom_point(aes(color=batteryCharging,shape=timedBeacon)) + scale_x_datetime("",date_labels = "%M", breaks=date_breaks(width="4 min"))
ggplot(data=perSec,aes(time,id))+geom_point(aes(color=batteryCharging,shape=timedBeacon))+scale_x_datetime("",date_labels = "%H:%M", breaks=date_breaks(width="90 min"))
ggplot(data=perSec[perSec$time > oneHourAgo, ],aes(time,id))+geom_point(aes(color=batteryCharging,shape=timedBeacon)) + scale_x_datetime("",date_labels = "%M", breaks=date_breaks(width="4 min"))
ggplot(data=perSec,aes(time,id))+geom_point(aes(color=batteryCharging,shape=timedBeacon))+scale_x_datetime("",date_labels = "%H:%M", breaks=date_breaks(width="90 min"))
ggplot(data=perSec[perSec$time > oneHourAgo, ],aes(time,id))+geom_point(aes(color=batteryCharging,shape=timedBeacon)) + scale_x_datetime("",date_labels = "%M", breaks=date_breaks(width="4 min"))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
gewd()
getwd()
setwd("/home/lucas/Documentos/courses/gettindAndCleaningData/")
dir.create("week4")
setwd("week4/")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv","housing.csv")
ls
housing<-read.csv("housing.csv")
colnames(housing)
strsplit(colnames(housing),"wgtp")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv","gdp.csv")
gdp<-read.csv("gdp.csv")
gdp
gdp$X.3
parse_number(gdp$X.3)
library(readr)
parse_number(gdp$X.3)
gdp$X.3<-parse_number(gdp$X.3)
gdp
gdp$X.3
NotNull<- gdp$X.3[!is.na(gdp$X.3)]
NotNull
mean(NotNull)
mean(NotNull)
NotNull %<% summarize(avg())
NotNull %<% summarize(avg(NotNull))
NotNull
mean(NotNull)
gdp$X
gdp
library(dplyr)
gdp[ !is.na(gdp$X.2) ,]
gdp<-gdp[ !is.na(gdp$X.2) & is.na(gdp$X.3) ,]
gdp
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv","gdp.csv")
gdp<-read.csv("gdp.csv")
gdp<-gdp[ !is.na(gdp$X.2) & !is.na(gdp$X.3) ,]
gdp
gdp<-read.csv("gdp.csv",skip=4)
gdp
gdp<-gdp[ !is.na(gdp$X.2) & !is.na(gdp$X.3) ,]
gdp
gdp<-read.csv("gdp.csv",skip=4)
gdp
gdp<-gdp[ !is.na(gdp$X.3) & !is.na(gdp$X.4) ,]
gdp
gdp<-gdp[, c("X.3","X.4")]
gdp
gdp<-read.csv("gdp.csv",skip=4)
gdp
gdp<-gdp[, c("X.3","X.4")]
gdp
gdp <- gdp[1:190,]
gdp
mean(gdp$X.4)
gdp$nonimal <- parse_number(gdp$X.4)
gdp$nonimal
mean(gdp$nonimal)
countryNames<-gdp$X.3
countryNames
grep("^United",countryNames)
library(quantmod)
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
sampleTimes
library(lubridate)
sampleTimes
subset(sampleTimes, ymd(sampleTimes) == 2012)
ymd(sampleTimes)
ymd(sampleTimes)
class(sampleTimes)
year(sampleTimes)
year(sampleTimes) == 2012
sum(year(sampleTimes) == 2012)
?weekdays
sum(weekday(sampleTimes) == 2012)
sum(weekdays(sampleTimes) == 2)
weekdays(sampleTimes) == 2
weekdays(sampleTimes)
weekdays(sampleTimes) == "segunda"
sum(weekdays(sampleTimes) == "segunda")
sum(weekday(sampleTimes) == 2012 & weekdays(sampleTimes) == "segunda")
sum(weekday(sampleTimes) == 2012 & weekdayss(sampleTimes) == "segunda")
sum(weekday(sampleTimes) == 2012 & weekdays(sampleTimes) == "segunda")
sum(year(sampleTimes) == 2012 & weekdays(sampleTimes) == "segunda")
setwd("../week3/")
gdp<-read_csv("gdp.csv",skip=3)
education<-read_csv("education.csv")
gdp <- gdp %>%
select(X1, Ranking, Economy, `US dollars)`) %>%
rename(ShortCode=X1, CountryName=Economy ,GDP=`US dollars)`) %>%
mutate(GDP=parse_number(GDP),Ranking=parse_number(Ranking)) %>%
filter(!is.na(GDP) & !is.na(CountryName) & !is.na(Ranking))
education <- education %>%
select(CountryCode,`Income Group`, )
gdpEducation <- merge(gdp,education,by.x="ShortCode",by.y="CountryCode")
gdpSort<- gdpEducation %>%
arrange(desc(GDP))
gdpSort$cuts<-cut(gdpSort$Ranking,breaks=5)
gdp<-read_csv("gdp.csv",skip=3)
education<-read_csv("education.csv")
gdp <- gdp %>%
select(X1, Ranking, Economy, `US dollars)`) %>%
rename(ShortCode=X1, CountryName=Economy ,GDP=`US dollars)`) %>%
mutate(GDP=parse_number(GDP),Ranking=parse_number(Ranking)) %>%
filter(!is.na(GDP) & !is.na(CountryName) & !is.na(Ranking))
education <- education %>%
select(CountryCode,`Income Group`, )
colnames(education)
education<-read_csv("education.csv")
colnames(education)
grep("Fiscal",colnames(education))
gdp<-read_csv("gdp.csv",skip=3)
gdp
education
colnames(education)
education$`Special Notes`
grep("Fiscal year", education$`Special Notes`)
grep("Fiscal year", education$`Special Notes`)
education$Special Notes`[grep("Fiscal year", education$`Special Notes`), ]
education$Special Notes`[grep("Fiscal year", education$`Special Notes`) ]
education$`Special Notes`[grep("Fiscal year", education$`Special Notes`) ]
grep("[Jj]une",education$`Special Notes`[grep("Fiscal year", education$`Special Notes`) ])
length(grep("[Jj]une",education$`Special Notes`[grep("Fiscal year", education$`Special Notes`) ]))
swirl()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this<-today()
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment<-now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
ymd(25081985)
dmy(25081985)
dmy("192012")
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours=8, minutes=34, seconds=55)
this_moment
update(this_moment, now())
update(this_moment, hours= 10, minutes=16, seconds=0 )
this_moment<-update(this_moment, hours= 10, minutes=16, seconds=0 )
this_moment
now()
now(tz="America/New_York")
nyc<-now("America/New_York")
nyc
nyc + days(2)
depart<-nyc + days(2)
depart
depart<-update(depart, hours=17, minutes=34)
depart
arrive<- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, "Asia/Hong_Kong")
arrive<-with_tz(arrive, "Asia/Hong_Kong")
arrive
mdy("June 17, 2008")
last_time<-mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive, tz="Singapore")
how_long <- interval(last_time, arrive)
as.period(how_long)
stpopwatch()
stopwatch()
setwd("../../reproducibleResearch/week2/RepData_PeerAssessment1/")
library(dplyr)
library(lubridate)
activity<-read.csv("activity.csv")
str(activity)
activity$interval
str(activity)
library(dplyr)
library(lubridate)
activity<-read.csv("activity.csv")
#Improving tidy format
activity<- activity %>% mutate( date = ymd(date) )
activity
class(activity$interval)
?hist
?group_by
?summarise
activity %>% group_by(date) %>%
summarise( sum(steps) )
?hist
totalPerDay <- activity %>% group_by(date) %>%
summarise( steps = sum(steps) )
totalPerDay
totalPerDay <- activity %>% group_by(date) %>%
summarise( steps = sum(steps) )
hist(totalPerday$steps)
totalPerDay <- activity %>% group_by(date) %>%
summarise( steps = sum(steps) )
hist(totalPerDay$steps)
library(dplyr)
library(lubridate)
activity<-read.csv("activity.csv")
#Improving tidy format
activity<- activity %>%
mutate( date = ymd(date) )
# Part one
#Summary per day
totalPerDay <- activity %>% group_by(date) %>%
summarise( steps = sum(steps) )
hist(totalPerDay$steps, breaks=100)
library(dplyr)
library(lubridate)
activity<-read.csv("activity.csv")
#Improving tidy format
activity<- activity %>%
mutate( date = ymd(date) )
# Part one
#Summary per day
totalPerDay <- activity %>% group_by(date) %>%
summarise( steps = sum(steps) )
hist(totalPerDay$steps, breaks=20)
meanAndMedian <- totalPerDay %<% summarise( mean = mean(steps), median = median(steps) )
meanAndMedian <- totalPerDay %>% summarise( mean = mean(steps), median = median(steps) )
meanAndMedian
?summarise
meanAndMedian <- totalPerDay %>% summarise( avg = mean(steps), md = median(steps) )
meanAndMedian
meanAndMedian <- totalPerDay[!is.na(steps), ] %>% summarise( avg = mean(steps), md = median(steps) )
meanAndMedian <- totalPerDay[!is.na(totalPerDay$steps), ] %>%
summarise( avg = mean(steps), md = median(steps) )
meanAndMedian
str(meanAndMedian)
meanAndMedian <- totalPerDay[!is.na(totalPerDay$steps), ] %>%
summarise( mean = mean(steps), median = median(steps) )
str(meanAndMedian)
print("Mean:  ", meanAndMedian$mean)
?sprintf
library(dplyr)
library(lubridate)
activity<-read.csv("activity.csv")
#Improving tidy format
activity<- activity %>%
mutate( date = ymd(date) )
# Part one
#Summary per day
totalPerDay <- activity %>% group_by(date) %>%
summarise( steps = sum(steps) )
#Histogram of steps per day
hist(totalPerDay$steps, breaks=20)
# Mean and median per day
meanAndMedian <- totalPerDay[!is.na(totalPerDay$steps), ] %>%
summarise( mean = mean(steps), median = median(steps) )
sprintf("Mean: %s, Median : %s", meanAndMedian$mean, meanAndMedian$median)
library(dplyr)
library(lubridate)
activity<-read.csv("activity.csv")
#Improving tidy format
activity<- activity %>%
mutate( date = ymd(date) )
# Part one  : Summary per day
totalPerDay <- activity %>% group_by(date) %>%
summarise( steps = sum(steps) )
##Histogram of steps per day
hist(totalPerDay$steps, breaks=20)
## Mean and median per day
meanAndMedian <- totalPerDay[!is.na(totalPerDay$steps), ] %>%
summarise( mean = mean(steps), median = median(steps) )
sprintf("Mean: %s, Median : %s", meanAndMedian$mean, meanAndMedian$median)
hist(totalPerDay$steps, breaks=20, main = "Histogram of steps per day")
hist(totalPerDay$steps, breaks=20, main = "Histogram of steps per day", ylab = "Steps per day")
hist(totalPerDay$steps, breaks=20, main = "Histogram of steps per day", xlab = "Steps per day")
